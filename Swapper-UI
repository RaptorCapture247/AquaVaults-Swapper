<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>AquaVaults Swapper</title>
  <script src="https://unpkg.com/@solana/web3.js@1.95.1/lib/index.iife.min.js"></script>
  <style>
    body { font-family: sans-serif; background: #0b0e11; color: #eaeaea; text-align: center; padding: 2rem; }
    input, select, button { margin: 0.5rem; padding: 0.6rem; font-size: 1rem; border-radius: 8px; border: none; }
    button { background: #6366f1; color: white; cursor: pointer; }
    button:hover { background: #4f46e5; }
    button:disabled { background: #4b5563; cursor: not-allowed; }
    .row { margin-top: 1rem; }
    a { color: #818cf8; }
    .info, .fee-controls, .debug, .vault-info {
      background: #1e293b; padding: 1rem; border-radius: 8px;
      margin: 1rem auto; max-width: 600px;
    }
    .fee-display { font-size: 1.5rem; font-weight: bold; color: #818cf8; margin: 0.5rem 0; }
    input[type="number"].fee-input {
      width: 100px; text-align: center;
      background: #0b0e11; color: #eaeaea; border: 2px solid #4f46e5;
    }
    input[type="checkbox"] { width: 20px; height: 20px; cursor: pointer; }
    #status { margin-top: 1rem; padding: 1rem; border-radius: 8px; min-height: 20px; }
    .error { color: #ef4444; } .success { color: #10b981; }
    .pending { color: #f59e0b; }
    .controls-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; max-width: 600px; margin: 1rem auto; }
    .debug { font-size: 0.85rem; text-align: left; font-family: monospace; max-height: 300px; overflow-y: auto; }
    .vault-info { background: #1a1f2e; border: 1px solid #4f46e5; }
    .vault-address { font-family: monospace; font-size: 0.75rem; color: #94a3b8; word-break: break-all; }
    .affiliate-indicator { 
      display: inline-block; 
      padding: 0.25rem 0.75rem; 
      border-radius: 20px; 
      font-size: 0.85rem; 
      font-weight: bold;
      margin-left: 0.5rem;
    }
    .affiliate-1 { background: #06fc43; color: white; }
    .affiliate-2 { background: #1004f7; color: white; }
    @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
    .confirming { animation: pulse 2s infinite; }
    .toggle-label {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      font-weight: bold;
      text-align: center;
      margin: 0 auto;
    }
    .toggle-option {
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      text-align: center;
      min-width: 140px;
    }
    .toggle-active-1 { background: #06fc43; color: white; }
    .toggle-active-2 { background: #1004f7; color: white; }
    .toggle-inactive { background: transparent; color: #64748b; }
  </style>
</head>
<body>
  <h1>AquaVaults Swapper</h1>

  <div class="info">
    <p><strong>Choose Your Affiliate</strong></p>
    <p style="font-size: 0.8rem; word-break: break-all;"> </p>
    <div style="margin-top: 1rem;">
      <label class="toggle-label">
        <span id="affiliate1Label" class="toggle-option">
        Pond0x<br><small>(Swap Rewards &</small><br><small>Mining Boost)</small></span>
        <input type="checkbox" id="affiliateToggle" />
        <span id="affiliate2Label" class="toggle-option">
        AquaVaults<br><small>(Support Development)</small></span>
      </label>
      <p style="font-size: 0.75rem; color: #64748b; margin-top: 0.5rem;">Check To Use AquaVaults</p>
    </div>
  </div>

  <div class="vault-info">
    <p><strong>üè¶ Active Token Vault</strong> <span id="affiliateIndicator" class="affiliate-indicator affiliate-1">Pond0x</span></p>
    <p id="activeVault" class="vault-address">Select a token to see vault</p>
  </div>

  <div class="controls-grid">
    <div class="fee-controls">
      <p><strong>üí∞ Platform Fee</strong></p>
      <div class="fee-display"><span id="feePercent">1.00</span>%</div>
      <input type="number" id="feeInput" class="fee-input" min="0" max="1000" value="100" step="5" />
      <p style="font-size: 0.8rem; color: #94a3b8;">bps (100 = 1.00%)</p>
    </div>
    <div class="fee-controls">
      <p><strong>üìä Slippage</strong></p>
      <div class="fee-display"><span id="slippagePercent">1.00</span>%</div>
      <input type="number" id="slippageInput" class="fee-input" min="0" max="5000" value="100" step="50" />
      <p style="font-size: 0.8rem; color: #94a3b8;">bps (100 = 1.00%)</p>
    </div>
  </div>

  <div class="row">
    <label>From:</label>
    <select id="inputMint">
      <option value="So11111111111111111111111111111111111111112">SOL</option>
      <option value="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v">USDC</option>
      <option value="Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB">USDT</option>
      <option value="3JgFwoYV74f6LwWjQWnr3YDPFnmBdwQfNyubv99jqUoq">wPOND</option>
      <option value="he1iusmfkpAdwvxLNGV8Y1iSbj4rUy6yMhEA3fotn9A">hSOL</option>
      <option value="mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So">mSOL</option>
      <option value="B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B">PepeOnSOL</option>
    </select>
  </div>

  <div class="row">
    <label>To:</label>
    <select id="outputMint">
      <option value="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v">USDC</option>
      <option value="Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB">USDT</option>
      <option value="So11111111111111111111111111111111111111112">SOL</option>
      <option value="3JgFwoYV74f6LwWjQWnr3YDPFnmBdwQfNyubv99jqUoq">wPOND</option>
      <option value="he1iusmfkpAdwvxLNGV8Y1iSbj4rUy6yMhEA3fotn9A">hSOL</option>
      <option value="mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So">mSOL</option>
      <option value="B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B">PepeOnSOL</option>
    </select>
  </div>

  <div class="row">
    <label>Amount:</label>
    <input id="amount" type="number" placeholder="Enter amount" step="0.01" />
  </div>

  <p id="balance">Balance: ‚Äî</p>
  <p id="estimate">Estimated output: ‚Äî</p>

  <button id="connect">Connect Wallet</button>
  <button id="swap" disabled>Swap</button>

  <p id="status"></p>
  <div id="debug" class="debug" style="display: none;"></div>

  <script>
    // Pond0x Token Vaults (Original)
    const TOKEN_VAULTS_AFFILIATE_1 = {
      "So11111111111111111111111111111111111111112": "9hCLuXrQrHCU9i7y648Nh7uuWKHUsKDiZ5zyBHdZPWtG", // SOL
      "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": "6NqvoPpSYCPEtLEukQaSNs7mS3yK6k285saH9o3vgC96", // USDC
      "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": "5LmFGjbae5iWejFVT8UiRLggh1me22nTetmere8SjwKy", // USDT
      "3JgFwoYV74f6LwWjQWnr3YDPFnmBdwQfNyubv99jqUoq": "GKHmDYWPE8Bf74xDntnpx4hi4H7pRp3HK5QYvPyXGEiU", // wPOND
      "he1iusmfkpAdwvxLNGV8Y1iSbj4rUy6yMhEA3fotn9A": "4jkVjzXtrCuxQus3neMtLfNL4wZhsPmm9fKGXoLMXqsG", // hSOL
      "B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B": "3qGSU2RySrjvQ2iGMts2HZ4ssGVSrBUSGL4jN7LHGhgo", // PepeOnSOL

    };

    // AquaVaults Token Vaults (New)
    const TOKEN_VAULTS_AFFILIATE_2 = {
      "So11111111111111111111111111111111111111112": "2qcR7nCVRmpxHCYTdQ6G1DjNcDzgEq9eQ1ZrxcmjeVy9", // SOL
      "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": "4en3gmtiPtmiHCi5mwT1TrATj4jNe7woJPZLQaWv6Ezu", // USDC
      "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": "5wV1qSp8n9z5DEGHV6JJoEoxdYeBrnVCtP9LbD4Vwx7D", // USDT
      "3JgFwoYV74f6LwWjQWnr3YDPFnmBdwQfNyubv99jqUoq": "E4s4KzRBvYQxpFR1L7z7cLDtT814i7bqWFSGgqCDBCn9", // wPOND
      "he1iusmfkpAdwvxLNGV8Y1iSbj4rUy6yMhEA3fotn9A": "54GcC3SjZzavvVJ5ipFfCvQHNnpPRsJLXUdfxNmeJHHm", // hSOL
      "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So": "49URcyxPiaKRgoEAWfDtJHGWcZus3SVkF39b9Szf3XqC", // mSOL
      "B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B": "Ff7tzrabm8sxHbL4cTmBDby2EQvvtab6NTh56R69u6KS", // PepeOnSOL
    };

    // Token names for display
    const TOKEN_NAMES = {
      "So11111111111111111111111111111111111111112": "SOL",
      "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": "USDC",
      "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": "USDT",
      "3JgFwoYV74f6LwWjQWnr3YDPFnmBdwQfNyubv99jqUoq": "wPOND",
      "he1iusmfkpAdwvxLNGV8Y1iSbj4rUy6yMhEA3fotn9A": "hSOL",
      "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So": "mSOL",
      "B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B": "PepeOnSOL"
    };

    const REFERRAL_PROGRAM_ID = "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4";
    const RPC_ENDPOINTS = ["Your Personal RPC"];
    let connection = new solanaWeb3.Connection(RPC_ENDPOINTS[0], 'confirmed');

    let walletPublicKey = null, isWalletConnected = false;

    const TOKEN_DECIMALS = {
      "So11111111111111111111111111111111111111112": 9,  // SOL
      "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": 6,  // USDC
      "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": 6,  // USDT
      "3JgFwoYV74f6LwWjQWnr3YDPFnmBdwQfNyubv99jqUoq": 9,  // wPOND
      "he1iusmfkpAdwvxLNGV8Y1iSbj4rUy6yMhEA3fotn9A": 9,   // hSOL
      "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So": 9,    // mSOL
      "B5WTLaRwaUQpKk7ir1wniNB6m5o8GgMrimhKMYan2R6B": 6,    // PepeOnSOL
    };

    let platformFeeBps = 100;
    let slippageBps = 100;
    let useAffiliate2 = false;

    // Initialize toggle state
    document.getElementById("affiliateToggle").checked = useAffiliate2;
    updateAffiliateDisplay();

    const updateFeeDisplay = bps => document.getElementById("feePercent").textContent = (bps / 100).toFixed(2);
    const updateSlippageDisplay = bps => document.getElementById("slippagePercent").textContent = (bps / 100).toFixed(2);
    updateFeeDisplay(platformFeeBps); updateSlippageDisplay(slippageBps);

    // Update affiliate display based on toggle state
    function updateAffiliateDisplay() {
      const isAffiliate2 = document.getElementById("affiliateToggle").checked;
      const indicator = document.getElementById("affiliateIndicator");
      const label1 = document.getElementById("affiliate1Label");
      const label2 = document.getElementById("affiliate2Label");
      
      if (isAffiliate2) {
        indicator.textContent = "AquaVaults";
        indicator.className = "affiliate-indicator affiliate-2";
        label1.className = "toggle-option toggle-inactive";
        label2.className = "toggle-option toggle-active-2";
      } else {
        indicator.textContent = "Pond0x";
        indicator.className = "affiliate-indicator affiliate-1";
        label1.className = "toggle-option toggle-active-1";
        label2.className = "toggle-option toggle-inactive";
      }
      
      updateActiveVault();
    }

    // Get current active token vaults based on toggle
    function getCurrentVaults() {
      return document.getElementById("affiliateToggle").checked ? 
        TOKEN_VAULTS_AFFILIATE_2 : TOKEN_VAULTS_AFFILIATE_1;
    }

    // Update active vault display
    function updateActiveVault() {
      const inputMint = document.getElementById("inputMint").value;
      const vaults = getCurrentVaults();
      const vault = vaults[inputMint];
      const tokenName = TOKEN_NAMES[inputMint];
      const affiliateName = document.getElementById("affiliateToggle").checked ? "AquaVaults" : "Pond0x";
      
      if (vault) {
        document.getElementById("activeVault").innerHTML = `${tokenName} Vault (${affiliateName}): ${vault}`;
      } else {
        document.getElementById("activeVault").innerHTML = `No vault configured for selected token. Please change affiliate.`;
      }
    }

    // Event handlers
    document.getElementById("affiliateToggle").onchange = e => {
      useAffiliate2 = e.target.checked;
      localStorage.setItem("useAffiliate2", useAffiliate2);
      updateAffiliateDisplay();
      debugLog(`Switched to ${useAffiliate2 ? 'AquaVaults' : 'Pond0x'} vaults`);
    };

    document.getElementById("feeInput").oninput = e => {
      platformFeeBps = parseInt(e.target.value) || 100;
      //localStorage.setItem("platformFeeBps", platformFeeBps);
      updateFeeDisplay(platformFeeBps); getEstimate();
    };

    document.getElementById("slippageInput").oninput = e => {
      slippageBps = parseInt(e.target.value) || 100;
      // localStorage.setItem("slippageBps", slippageBps);
      updateSlippageDisplay(slippageBps); getEstimate();
    };

    const debugLog = msg => {
      const d = document.getElementById("debug");
      d.style.display = "block"; const t = new Date().toLocaleTimeString();
      d.innerHTML += `<div>[${t}] ${msg}</div>`; console.log(`[${t}]`, msg);
    };

    async function connectWallet() {
      if (!window.solana) return alert("‚ö†Ô∏è No wallet detected!");
      if (isWalletConnected) return disconnectWallet();

      try {
        const resp = await window.solana.connect();
        walletPublicKey = resp.publicKey.toBase58();
        isWalletConnected = true;
        document.getElementById("status").innerHTML = `‚úÖ Connected: <b>${walletPublicKey.slice(0, 4)}...${walletPublicKey.slice(-4)}</b>`;
        document.getElementById("connect").innerText = "Disconnect";
        document.getElementById("swap").disabled = false;
        await updateBalance();
      } catch (err) {
        document.getElementById("status").innerHTML = `<span class="error">‚ùå ${err.message}</span>`;
      }
    }

    async function disconnectWallet() {
      if (window.solana?.isConnected) await window.solana.disconnect();
      walletPublicKey = null; isWalletConnected = false;
      document.getElementById("status").innerText = "Disconnected";
      document.getElementById("connect").innerText = "Connect Wallet";
      document.getElementById("swap").disabled = true;
    }

    async function updateBalance() {
      if (!walletPublicKey) return;
      const mint = document.getElementById("inputMint").value;
      let bal = 0;
      try {
        if (mint === "So11111111111111111111111111111111111111112")
          bal = (await connection.getBalance(new solanaWeb3.PublicKey(walletPublicKey))) / 1e9;
        else {
          const accs = await connection.getParsedTokenAccountsByOwner(new solanaWeb3.PublicKey(walletPublicKey), { mint: new solanaWeb3.PublicKey(mint) });
          if (accs.value.length > 0) bal = accs.value[0].account.data.parsed.info.tokenAmount.uiAmount;
        }
        document.getElementById("balance").innerText = `Balance: ${bal.toFixed(6)}`;
      } catch { document.getElementById("balance").innerText = "Balance: Error"; }
    }

    async function getEstimate() {
      const inputMint = document.getElementById("inputMint").value;
      const outputMint = document.getElementById("outputMint").value;
      const uiAmount = parseFloat(document.getElementById("amount").value);
      if (!uiAmount || uiAmount <= 0) return document.getElementById("estimate").innerText = "Estimated output: ‚Äî";
      const decimals = TOKEN_DECIMALS[inputMint] || 6;
      const amount = Math.floor(uiAmount * 10 ** decimals);

      let url = `https://lite-api.jup.ag/swap/v1/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}&platformFeeBps=${platformFeeBps}`;
      try {
        const quote = await fetch(url).then(r => r.json());
        const outDecimals = TOKEN_DECIMALS[outputMint] || 6;
        document.getElementById("estimate").innerText = `Estimated output: ‚âà ${(quote.outAmount / 10 ** outDecimals).toFixed(6)}`;
      } catch { document.getElementById("estimate").innerText = "Estimated output: Error"; }
    }

    async function swap() {
      if (!walletPublicKey) return alert("Connect wallet first!");
      const inputMint = document.getElementById("inputMint").value;
      const outputMint = document.getElementById("outputMint").value;
      const uiAmount = parseFloat(document.getElementById("amount").value);
      if (!uiAmount || uiAmount <= 0) return alert("Enter valid amount");

      const decimals = TOKEN_DECIMALS[inputMint] || 6;
      const amount = Math.floor(uiAmount * 10 ** decimals);

      // Get the appropriate vault for the selected input token and affiliate
      const vaults = getCurrentVaults();
      const referralVault = vaults[inputMint];
      if (!referralVault) {
        alert(`‚ö†Ô∏è The selected affiliate (${affiliateName}) does not have a vault for ${tokenName}. Please choose a different affiliate or token.`);
        document.getElementById("swap").disabled = true; // optionally disable the button
        return;
      }
      const tokenName = TOKEN_NAMES[inputMint];
      const affiliateName = document.getElementById("affiliateToggle").checked ? "AquaVaults" : "Pond0x";

      debugLog(`Input Token: ${tokenName} (${inputMint})`);
      debugLog(`Using ${affiliateName} Vault: ${referralVault}`);
      debugLog(`Fee: ${platformFeeBps}bps, Slippage: ${slippageBps}`);

      // Disable swap button during transaction
      document.getElementById("swap").disabled = true;
      document.getElementById("status").innerHTML = `<span class="pending">‚è≥ Preparing transaction...</span>`;

      let quoteUrl = `https://lite-api.jup.ag/swap/v1/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}&platformFeeBps=${platformFeeBps}`;
      
      try {
        const quote = await fetch(quoteUrl).then(r => r.json());

        const swapBody = {
          userPublicKey: walletPublicKey,
          wrapAndUnwrapSol: true,
          quoteResponse: quote,
          swapMode: "ExactIn",
          dynamicComputeUnitLimit: true,
          prioritizationFeeLamports: "auto",
          platformFeeBps: platformFeeBps,
          feeAccount: referralVault  // Use the selected affiliate's vault
        };

        debugLog(`Referral vault added for ${tokenName} (${affiliateName}): ${referralVault} ‚úÖ`);
        debugLog("Building and sending transaction...");
        document.getElementById("status").innerHTML = `<span class="pending">‚è≥ Building transaction...</span>`;

        const res = await fetch("https://lite-api.jup.ag/swap/v1/swap", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(swapBody),
        });

        if (!res.ok) {
          const errText = await res.text();
          debugLog(`‚ùå Jupiter API Error (${res.status}): ${errText}`);
          document.getElementById("status").innerHTML = `<span class="error">‚ùå Jupiter API Error (${res.status})</span>`;
          document.getElementById("swap").disabled = false;
          return;
        }

        const swapRes = await res.json();
        if (!swapRes.swapTransaction) {
          debugLog("‚ùå No swapTransaction returned from API");
          document.getElementById("status").innerHTML = `<span class="error">‚ùå No swapTransaction returned</span>`;
          document.getElementById("swap").disabled = false;
          return;
        }

        const tx = solanaWeb3.VersionedTransaction.deserialize(
          Uint8Array.from(atob(swapRes.swapTransaction), c => c.charCodeAt(0))
        );
        
        document.getElementById("status").innerHTML = `<span class="pending">‚è≥ Please approve transaction in wallet...</span>`;
        const signedTx = await window.solana.signTransaction(tx);
        
        document.getElementById("status").innerHTML = `<span class="pending">‚è≥ Sending transaction...</span>`;
        const sig = await connection.sendRawTransaction(signedTx.serialize());
        
        // Show confirming status with animation
        document.getElementById("status").innerHTML = `<span class="pending confirming">‚è≥ Confirming transaction... ${sig.slice(0, 8)}...</span>`;
        debugLog(`Transaction sent with ${affiliateName}: ${sig}`);
        
        // Wait for confirmation
        await connection.confirmTransaction(sig, "confirmed");
        
        // Only show the View TX link after confirmation
        document.getElementById("status").innerHTML = `<span class="success">‚úÖ Transaction Confirmed (${affiliateName})!</span> <a href="https://solscan.io/tx/${sig}" target="_blank">View TX ‚Üí</a>`;
        debugLog(`‚úÖ Transaction confirmed for ${affiliateName}: ${sig}`);
        
        // Update balance after successful swap
        await updateBalance();
        
      } catch (err) {
        debugLog(`‚ùå Transaction error: ${err.message}`);
        document.getElementById("status").innerHTML = `<span class="error">‚ùå ${err.message}</span>`;
      } finally {
        // Re-enable swap button
        document.getElementById("swap").disabled = false;
      }
    }

    document.getElementById("connect").onclick = connectWallet;
    document.getElementById("swap").onclick = swap;
    document.getElementById("inputMint").onchange = () => {
      updateBalance();
      updateActiveVault();
      getEstimate();
    };
    document.getElementById("amount").oninput = getEstimate;
    document.getElementById("outputMint").onchange = getEstimate;

    // Initialize vault display
    updateActiveVault();
  </script>
</body>
</html>
